package com.github.megatronking.svg.sample.drawables;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;

import com.github.megatronking.svg.support.SVGRenderer;

/**
 * AUTO-GENERATED FILE.  DO NOT MODIFY.
 * 
 * This class was automatically generated by the
 * SVG-Generator. It should not be modified by hand.
 */
public class ic_svg_09 extends SVGRenderer {

    public ic_svg_09(Context context) {
        super(context);
        mAlpha = 1.0f;
        mWidth = dip2px(48.0f);
        mHeight = dip2px(48.0f);
    }

    @Override
    public void render(Canvas canvas, int w, int h, ColorFilter filter) {
        
        final float scaleX = w / 455.73f;
        final float scaleY = h / 455.73f;
        
        mPath.reset();
        mRenderPath.reset();
        
        mFinalPathMatrix.setValues(new float[]{1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f});
        mFinalPathMatrix.postScale(scaleX, scaleY);
        
        mPath.moveTo(227.86f, 182.55f);
        mPath.rCubicTo(-24.98f, 0.0f, -45.32f, 20.33f, -45.32f, 45.31f);
        mPath.rCubicTo(0.0f, 24.99f, 20.34f, 45.33f, 45.32f, 45.33f);
        mPath.rCubicTo(24.99f, 0.0f, 45.32f, -20.34f, 45.32f, -45.33f);
        mPath.cubicTo(273.18f, 202.88f, 252.85f, 182.55f, 227.86f, 182.55f);
        mPath.close();
        mPath.moveTo(227.86f, 182.55f);
        mPath.moveTo(227.86f, 182.55f);
        mPath.rCubicTo(-24.98f, 0.0f, -45.32f, 20.33f, -45.32f, 45.31f);
        mPath.rCubicTo(0.0f, 24.99f, 20.34f, 45.33f, 45.32f, 45.33f);
        mPath.rCubicTo(24.99f, 0.0f, 45.32f, -20.34f, 45.32f, -45.33f);
        mPath.cubicTo(273.18f, 202.88f, 252.85f, 182.55f, 227.86f, 182.55f);
        mPath.close();
        mPath.moveTo(227.86f, 182.55f);
        mPath.moveTo(303.36f, 108.66f);
        mPath.lineTo(152.37f, 108.66f);
        mPath.rCubicTo(-24.1f, 0.0f, -43.71f, 19.61f, -43.71f, 43.71f);
        mPath.rLineTo(0f, 150.99f);
        mPath.rCubicTo(0.0f, 24.1f, 19.61f, 43.71f, 43.71f, 43.71f);
        mPath.rLineTo(150.99f, 0f);
        mPath.rCubicTo(24.1f, 0.0f, 43.71f, -19.61f, 43.71f, -43.71f);
        mPath.lineTo(347.06998f, 152.37f);
        mPath.cubicTo(347.07f, 128.27f, 327.46f, 108.66f, 303.36f, 108.66f);
        mPath.close();
        mPath.moveTo(303.36f, 108.66f);
        mPath.moveTo(227.86f, 306.35f);
        mPath.rCubicTo(-43.27f, 0.0f, -78.48f, -35.21f, -78.48f, -78.49f);
        mPath.rCubicTo(0.0f, -43.27f, 35.21f, -78.48f, 78.48f, -78.48f);
        mPath.rCubicTo(43.28f, 0.0f, 78.49f, 35.21f, 78.49f, 78.48f);
        mPath.cubicTo(306.35f, 271.14f, 271.14f, 306.35f, 227.86f, 306.35f);
        mPath.close();
        mPath.moveTo(227.86f, 306.35f);
        mPath.moveTo(308.87f, 165.61f);
        mPath.rCubicTo(-10.24f, 0.0f, -18.57f, -8.33f, -18.57f, -18.57f);
        mPath.rCubicTo(0.0f, -10.23999f, 8.33f, -18.57f, 18.57f, -18.57f);
        mPath.rCubicTo(10.240021f, 0.0f, 18.57f, 8.33f, 18.57f, 18.57f);
        mPath.cubicTo(327.44f, 157.28001f, 319.11f, 165.61f, 308.87f, 165.61f);
        mPath.close();
        mPath.moveTo(308.87f, 165.61f);
        mPath.moveTo(227.86f, 182.55f);
        mPath.rCubicTo(-24.98f, 0.0f, -45.32f, 20.33f, -45.32f, 45.31f);
        mPath.rCubicTo(0.0f, 24.99f, 20.34f, 45.33f, 45.32f, 45.33f);
        mPath.rCubicTo(24.99f, 0.0f, 45.32f, -20.34f, 45.32f, -45.33f);
        mPath.cubicTo(273.18f, 202.88f, 252.85f, 182.55f, 227.86f, 182.55f);
        mPath.close();
        mPath.moveTo(227.86f, 182.55f);
        mPath.moveTo(303.36f, 108.66f);
        mPath.lineTo(152.37f, 108.66f);
        mPath.rCubicTo(-24.1f, 0.0f, -43.71f, 19.61f, -43.71f, 43.71f);
        mPath.rLineTo(0f, 150.99f);
        mPath.rCubicTo(0.0f, 24.1f, 19.61f, 43.71f, 43.71f, 43.71f);
        mPath.rLineTo(150.99f, 0f);
        mPath.rCubicTo(24.1f, 0.0f, 43.71f, -19.61f, 43.71f, -43.71f);
        mPath.lineTo(347.06998f, 152.37f);
        mPath.cubicTo(347.07f, 128.27f, 327.46f, 108.66f, 303.36f, 108.66f);
        mPath.close();
        mPath.moveTo(303.36f, 108.66f);
        mPath.moveTo(227.86f, 306.35f);
        mPath.rCubicTo(-43.27f, 0.0f, -78.48f, -35.21f, -78.48f, -78.49f);
        mPath.rCubicTo(0.0f, -43.27f, 35.21f, -78.48f, 78.48f, -78.48f);
        mPath.rCubicTo(43.28f, 0.0f, 78.49f, 35.21f, 78.49f, 78.48f);
        mPath.cubicTo(306.35f, 271.14f, 271.14f, 306.35f, 227.86f, 306.35f);
        mPath.close();
        mPath.moveTo(227.86f, 306.35f);
        mPath.moveTo(308.87f, 165.61f);
        mPath.rCubicTo(-10.24f, 0.0f, -18.57f, -8.33f, -18.57f, -18.57f);
        mPath.rCubicTo(0.0f, -10.23999f, 8.33f, -18.57f, 18.57f, -18.57f);
        mPath.rCubicTo(10.240021f, 0.0f, 18.57f, 8.33f, 18.57f, 18.57f);
        mPath.cubicTo(327.44f, 157.28001f, 319.11f, 165.61f, 308.87f, 165.61f);
        mPath.close();
        mPath.moveTo(308.87f, 165.61f);
        mPath.moveTo(227.86f, 182.55f);
        mPath.rCubicTo(-24.98f, 0.0f, -45.32f, 20.33f, -45.32f, 45.31f);
        mPath.rCubicTo(0.0f, 24.99f, 20.34f, 45.33f, 45.32f, 45.33f);
        mPath.rCubicTo(24.99f, 0.0f, 45.32f, -20.34f, 45.32f, -45.33f);
        mPath.cubicTo(273.18f, 202.88f, 252.85f, 182.55f, 227.86f, 182.55f);
        mPath.close();
        mPath.moveTo(227.86f, 182.55f);
        mPath.moveTo(0.0f, 0.0f);
        mPath.rLineTo(0f, 455.73f);
        mPath.rLineTo(455.73f, 0f);
        mPath.lineTo(455.73f, 0.0f);
        mPath.lineTo(0.0f, 0.0f);
        mPath.close();
        mPath.moveTo(0.0f, 0.0f);
        mPath.moveTo(380.23f, 303.36f);
        mPath.rCubicTo(0.0f, 42.39f, -34.48f, 76.87f, -76.87f, 76.87f);
        mPath.lineTo(152.37f, 380.22998f);
        mPath.rCubicTo(-42.39f, 0.0f, -76.87f, -34.48f, -76.87f, -76.87f);
        mPath.lineTo(75.49999f, 152.37f);
        mPath.rCubicTo(0.0f, -42.39f, 34.48f, -76.87f, 76.87f, -76.87f);
        mPath.rLineTo(150.99f, 0f);
        mPath.rCubicTo(42.39f, 0.0f, 76.87f, 34.48f, 76.87f, 76.87f);
        mPath.lineTo(380.22998f, 303.36f);
        mPath.close();
        mPath.moveTo(380.23f, 303.36f);
        mPath.moveTo(303.36f, 108.66f);
        mPath.lineTo(152.37f, 108.66f);
        mPath.rCubicTo(-24.1f, 0.0f, -43.71f, 19.61f, -43.71f, 43.71f);
        mPath.rLineTo(0f, 150.99f);
        mPath.rCubicTo(0.0f, 24.1f, 19.61f, 43.71f, 43.71f, 43.71f);
        mPath.rLineTo(150.99f, 0f);
        mPath.rCubicTo(24.1f, 0.0f, 43.71f, -19.61f, 43.71f, -43.71f);
        mPath.lineTo(347.06998f, 152.37f);
        mPath.cubicTo(347.07f, 128.27f, 327.46f, 108.66f, 303.36f, 108.66f);
        mPath.close();
        mPath.moveTo(303.36f, 108.66f);
        mPath.moveTo(227.86f, 306.35f);
        mPath.rCubicTo(-43.27f, 0.0f, -78.48f, -35.21f, -78.48f, -78.49f);
        mPath.rCubicTo(0.0f, -43.27f, 35.21f, -78.48f, 78.48f, -78.48f);
        mPath.rCubicTo(43.28f, 0.0f, 78.49f, 35.21f, 78.49f, 78.48f);
        mPath.cubicTo(306.35f, 271.14f, 271.14f, 306.35f, 227.86f, 306.35f);
        mPath.close();
        mPath.moveTo(227.86f, 306.35f);
        mPath.moveTo(308.87f, 165.61f);
        mPath.rCubicTo(-10.24f, 0.0f, -18.57f, -8.33f, -18.57f, -18.57f);
        mPath.rCubicTo(0.0f, -10.23999f, 8.33f, -18.57f, 18.57f, -18.57f);
        mPath.rCubicTo(10.240021f, 0.0f, 18.57f, 8.33f, 18.57f, 18.57f);
        mPath.cubicTo(327.44f, 157.28001f, 319.11f, 165.61f, 308.87f, 165.61f);
        mPath.close();
        mPath.moveTo(308.87f, 165.61f);
        mPath.moveTo(227.86f, 182.55f);
        mPath.rCubicTo(-24.98f, 0.0f, -45.32f, 20.33f, -45.32f, 45.31f);
        mPath.rCubicTo(0.0f, 24.99f, 20.34f, 45.33f, 45.32f, 45.33f);
        mPath.rCubicTo(24.99f, 0.0f, 45.32f, -20.34f, 45.32f, -45.33f);
        mPath.cubicTo(273.18f, 202.88f, 252.85f, 182.55f, 227.86f, 182.55f);
        mPath.close();
        mPath.moveTo(227.86f, 182.55f);
        mPath.moveTo(227.86f, 182.55f);
        mPath.rCubicTo(-24.98f, 0.0f, -45.32f, 20.33f, -45.32f, 45.31f);
        mPath.rCubicTo(0.0f, 24.99f, 20.34f, 45.33f, 45.32f, 45.33f);
        mPath.rCubicTo(24.99f, 0.0f, 45.32f, -20.34f, 45.32f, -45.33f);
        mPath.cubicTo(273.18f, 202.88f, 252.85f, 182.55f, 227.86f, 182.55f);
        mPath.close();
        mPath.moveTo(227.86f, 182.55f);
        mPath.moveTo(227.86f, 182.55f);
        mPath.rCubicTo(-24.98f, 0.0f, -45.32f, 20.33f, -45.32f, 45.31f);
        mPath.rCubicTo(0.0f, 24.99f, 20.34f, 45.33f, 45.32f, 45.33f);
        mPath.rCubicTo(24.99f, 0.0f, 45.32f, -20.34f, 45.32f, -45.33f);
        mPath.cubicTo(273.18f, 202.88f, 252.85f, 182.55f, 227.86f, 182.55f);
        mPath.close();
        mPath.moveTo(227.86f, 182.55f);
        mPath.moveTo(303.36f, 108.66f);
        mPath.lineTo(152.37f, 108.66f);
        mPath.rCubicTo(-24.1f, 0.0f, -43.71f, 19.61f, -43.71f, 43.71f);
        mPath.rLineTo(0f, 150.99f);
        mPath.rCubicTo(0.0f, 24.1f, 19.61f, 43.71f, 43.71f, 43.71f);
        mPath.rLineTo(150.99f, 0f);
        mPath.rCubicTo(24.1f, 0.0f, 43.71f, -19.61f, 43.71f, -43.71f);
        mPath.lineTo(347.06998f, 152.37f);
        mPath.cubicTo(347.07f, 128.27f, 327.46f, 108.66f, 303.36f, 108.66f);
        mPath.close();
        mPath.moveTo(303.36f, 108.66f);
        mPath.moveTo(227.86f, 306.35f);
        mPath.rCubicTo(-43.27f, 0.0f, -78.48f, -35.21f, -78.48f, -78.49f);
        mPath.rCubicTo(0.0f, -43.27f, 35.21f, -78.48f, 78.48f, -78.48f);
        mPath.rCubicTo(43.28f, 0.0f, 78.49f, 35.21f, 78.49f, 78.48f);
        mPath.cubicTo(306.35f, 271.14f, 271.14f, 306.35f, 227.86f, 306.35f);
        mPath.close();
        mPath.moveTo(227.86f, 306.35f);
        mPath.moveTo(308.87f, 165.61f);
        mPath.rCubicTo(-10.24f, 0.0f, -18.57f, -8.33f, -18.57f, -18.57f);
        mPath.rCubicTo(0.0f, -10.23999f, 8.33f, -18.57f, 18.57f, -18.57f);
        mPath.rCubicTo(10.240021f, 0.0f, 18.57f, 8.33f, 18.57f, 18.57f);
        mPath.cubicTo(327.44f, 157.28001f, 319.11f, 165.61f, 308.87f, 165.61f);
        mPath.close();
        mPath.moveTo(308.87f, 165.61f);
        mPath.moveTo(227.86f, 182.55f);
        mPath.rCubicTo(-24.98f, 0.0f, -45.32f, 20.33f, -45.32f, 45.31f);
        mPath.rCubicTo(0.0f, 24.99f, 20.34f, 45.33f, 45.32f, 45.33f);
        mPath.rCubicTo(24.99f, 0.0f, 45.32f, -20.34f, 45.32f, -45.33f);
        mPath.cubicTo(273.18f, 202.88f, 252.85f, 182.55f, 227.86f, 182.55f);
        mPath.close();
        mPath.moveTo(227.86f, 182.55f);
        mPath.moveTo(227.86f, 182.55f);
        mPath.rCubicTo(-24.98f, 0.0f, -45.32f, 20.33f, -45.32f, 45.31f);
        mPath.rCubicTo(0.0f, 24.99f, 20.34f, 45.33f, 45.32f, 45.33f);
        mPath.rCubicTo(24.99f, 0.0f, 45.32f, -20.34f, 45.32f, -45.33f);
        mPath.cubicTo(273.18f, 202.88f, 252.85f, 182.55f, 227.86f, 182.55f);
        mPath.close();
        mPath.moveTo(227.86f, 182.55f);
        mPath.moveTo(227.86f, 182.55f);
        mPath.rCubicTo(-24.98f, 0.0f, -45.32f, 20.33f, -45.32f, 45.31f);
        mPath.rCubicTo(0.0f, 24.99f, 20.34f, 45.33f, 45.32f, 45.33f);
        mPath.rCubicTo(24.99f, 0.0f, 45.32f, -20.34f, 45.32f, -45.33f);
        mPath.cubicTo(273.18f, 202.88f, 252.85f, 182.55f, 227.86f, 182.55f);
        mPath.close();
        mPath.moveTo(227.86f, 182.55f);
        mPath.moveTo(303.36f, 108.66f);
        mPath.lineTo(152.37f, 108.66f);
        mPath.rCubicTo(-24.1f, 0.0f, -43.71f, 19.61f, -43.71f, 43.71f);
        mPath.rLineTo(0f, 150.99f);
        mPath.rCubicTo(0.0f, 24.1f, 19.61f, 43.71f, 43.71f, 43.71f);
        mPath.rLineTo(150.99f, 0f);
        mPath.rCubicTo(24.1f, 0.0f, 43.71f, -19.61f, 43.71f, -43.71f);
        mPath.lineTo(347.06998f, 152.37f);
        mPath.cubicTo(347.07f, 128.27f, 327.46f, 108.66f, 303.36f, 108.66f);
        mPath.close();
        mPath.moveTo(303.36f, 108.66f);
        mPath.moveTo(227.86f, 306.35f);
        mPath.rCubicTo(-43.27f, 0.0f, -78.48f, -35.21f, -78.48f, -78.49f);
        mPath.rCubicTo(0.0f, -43.27f, 35.21f, -78.48f, 78.48f, -78.48f);
        mPath.rCubicTo(43.28f, 0.0f, 78.49f, 35.21f, 78.49f, 78.48f);
        mPath.cubicTo(306.35f, 271.14f, 271.14f, 306.35f, 227.86f, 306.35f);
        mPath.close();
        mPath.moveTo(227.86f, 306.35f);
        mPath.moveTo(308.87f, 165.61f);
        mPath.rCubicTo(-10.24f, 0.0f, -18.57f, -8.33f, -18.57f, -18.57f);
        mPath.rCubicTo(0.0f, -10.23999f, 8.33f, -18.57f, 18.57f, -18.57f);
        mPath.rCubicTo(10.240021f, 0.0f, 18.57f, 8.33f, 18.57f, 18.57f);
        mPath.cubicTo(327.44f, 157.28001f, 319.11f, 165.61f, 308.87f, 165.61f);
        mPath.close();
        mPath.moveTo(308.87f, 165.61f);
        mPath.moveTo(227.86f, 182.55f);
        mPath.rCubicTo(-24.98f, 0.0f, -45.32f, 20.33f, -45.32f, 45.31f);
        mPath.rCubicTo(0.0f, 24.99f, 20.34f, 45.33f, 45.32f, 45.33f);
        mPath.rCubicTo(24.99f, 0.0f, 45.32f, -20.34f, 45.32f, -45.33f);
        mPath.cubicTo(273.18f, 202.88f, 252.85f, 182.55f, 227.86f, 182.55f);
        mPath.close();
        mPath.moveTo(227.86f, 182.55f);
        
        mRenderPath.addPath(mPath, mFinalPathMatrix);
        if (mFillPaint == null) {
            mFillPaint = new Paint();
            mFillPaint.setStyle(Paint.Style.FILL);
            mFillPaint.setAntiAlias(true);
        }
        mFillPaint.setColor(applyAlpha(-3852636, 1.0f));
        mFillPaint.setColorFilter(filter);
        canvas.drawPath(mRenderPath, mFillPaint);

    }

}